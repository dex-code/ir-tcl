dnl IR toolkit for tcl/tk
dnl (c) Index Data 1996
dnl See the file LICENSE for details.
dnl $Id: configure.in,v 1.15 1996-03-27 17:00:08 adam Exp $
AC_INIT(ir-tcl.h)
CC=${CC-cc}
dnl ------ Substitutions
AC_SUBST(CC)
AC_SUBST(TCLLIB)
AC_SUBST(TKLIB)
AC_SUBST(TCLINCLUDE)
AC_SUBST(TKINCLUDE)
AC_SUBST(YAZDIR)
AC_SUBST(MOSI)
AC_SUBST(MOSIDIR)
AC_SUBST(MOSILIB)
AC_SUBST(MOSIINC)
dnl ------ Preliminary settings
AC_PROG_INSTALL
AC_PREFIX_PROGRAM(tclsh)
AC_STDC_HEADERS
if test "$ac_cv_header_stdc" = no; then
	AC_MSG_WARN(Your system doesn't seem to support ANSI C)
fi
dnl ------ look for YAZ/XTImOSI
AC_MSG_CHECKING(for YAZ directory)
AC_ARG_WITH(yazdir,[  --with-yazdir           Yaz directory], [YAZDIR=$withval])
if test "$YAZDIR" = "yes"; then
	YAZDIR="../yaz-1.0"
elif test "$YAZDIR" = ""; then
        YAZDIR="../yaz"
        for i in ../yaz-1.0pl3 ../yaz-1.0pl4 ../yaz-1.0pl5 ../yaz; do
            if test -d $i; then
                YAZDIR=$i
            fi
        done
fi
if test ! -d $YAZDIR; then
	AC_MSG_WARN(YAZ directory ${YAZDIR} doesn't exist)
else
	AC_MSG_RESULT($YAZDIR)
fi
AC_MSG_CHECKING(for MOSI)
AC_ARG_WITH(mosidir, [  --with-mosidir          MOSI directory], [MOSIDIR=$withval])
if test "$MOSIDIR" = "yes"; then
	MOSIDIR="../xtimosi/src"
elif test "$MOSIDIR" = ""; then
	MOSIDIR="../xtimosi/src"
fi
if test -r ${YAZDIR}/lib/librfc.a; then
	MOSI=1
	MOSIDIR=$MOSIDIR
	MOSILIB='$(MOSIDIR)/libmosi.a $(YAZDIR)/lib/librfc.a'
	MOSIINC='-I$(MOSIDIR)'
        MOSITELL=yes
else
	MOSI=0
	MOSIDIR=$MOSIDIR
        MOSILIB='# $(MOSIDIR)/libmosi.a $(YAZDIR)/lib/librfc.a'
	MOSIINC='# -I$(MOSIDIR)'
        MOSITELL=no
fi
AC_MSG_RESULT($MOSITELL)
dnl ------ look for Tcl
if test "x$prefix" = xNONE; then
	tryprefix=/usr/local
else
	tryprefix=${prefix}
fi
if test -r ${tryprefix}/lib/tclConfig.sh; then
	AC_MSG_CHECKING(for Tcl)
	source ${tryprefix}/lib/tclConfig.sh
	if test "$TCL_LIB_VERSIONS_OK" = "yes"; then
		TCLLIB="-L${TCL_PREFIX}/lib -ltcl${TCL_VERSION}"
	else
		TCLLIB=${TCL_PREFIX}/lib/${TCL_LIB_FILE}
	fi
	TCLLIB="${TCLLIB} ${TCL_LIBS}"
	TCLINCLUDE=-I${TCL_PREFIX}/include
	RANLIB=$TCL_RANLIB
	AC_MSG_RESULT($TCL_VERSION)
else
	AC_PROG_RANLIB
	checkBoth=0
	AC_CHECK_FUNC(connect, tk_checkSocket=0, tk_checkSocket=1)
	if test "$tk_checkSocket" = 1; then
		AC_CHECK_LIB(socket, main, LIBS="$LIBS -lsocket", checkBoth=1)
	fi
	if test "$checkBoth" = 1; then
		tk_oldLibs=$LIBS
		LIBS="$LIBS -lsocket -lnsl"
		AC_CHECK_FUNC(accept, , [LIBS=$tk_oldLibs])
	fi
	AC_CHECK_FUNC(gethostbyname, , AC_CHECK_LIB(nsl, main, [LIBS="$LIBS -lnsl"]))
	AC_MSG_CHECKING(for Tcl)
	TCL_VERSION=nope
	for i in "" 7.4 7.5; do
		if test -r ${tryprefix}/lib/libtcl${i}.a; then
			TCL_VERSION=$i
		fi
	done
	if test "$TCL_VERSION" = nope; then
		AC_MSG_WARN(Didn't find Tcl)
		TCLLIB=-ltcl
		TCLINCLUDE=" # -I.. Tcl/Tk include path"
	else
		if test "$TCL_VERSION" = ""; then
			AC_MSG_RESULT(7.3)
		else
			AC_MSG_RESULT($TCL_VERSION)
		fi
		TCLLIB=${tryprefix}/lib/libtcl${TCL_VERSION}.a
		TCLINCLUDE=-I${tryprefix}/include
	fi
	TCLLIB="${TCLLIB} ${LIBS} -lm"
fi
dnl ------ look for Tk
if test -r ${tryprefix}/lib/tkConfig.sh; then
	AC_MSG_CHECKING(for Tk)
	source ${tryprefix}/lib/tkConfig.sh
	AC_MSG_RESULT($TK_VERSION)
	TKINCLUDE=${TK_XINCLUDES}
	TKLIB="${TK_PREFIX}/lib/${TK_LIB_FILE} ${TK_LIBS}"
else
	AC_MSG_CHECKING(for Tk)
	TK_VERSION=nope
	for i in "" 4.0 4.1; do
		if test -r ${tryprefix}/lib/libtk${i}.a; then
			TK_VERSION=$i
		fi
	done
	if test "$TK_VERSION" = nope; then
		AC_MSG_WARN(Didn't find Tk)
		TKLIB=-ltk
	else
		TKLIB=${tryprefix}/lib/libtk${TK_VERSION}.a
		if test "$TK_VERSION" = ""; then
			AC_MSG_RESULT(3.x)
		else
			AC_MSG_RESULT($TK_VERSION)
		fi
	fi
	TKLIB=${tryprefix}/lib/libtk${i}.a
	AC_PATH_X
	not_really_there=""
	if test "$no_x" = ""; then
		if test "$x_includes" = ""; then
			AC_TRY_CPP([#include <X11/XIntrinsic.h>], , not_really_there="yes")
		else
			if test ! -r $x_includes/X11/Intrinsic.h; then
				not_really_there="yes"
			fi
		fi
	fi
	if test "$no_x" = "yes" -o "$not_really_there" = "yes"; then
		echo checking for X11 header files
		XINCLUDES="# no special path needed"
		AC_TRY_CPP([#include <X11/Intrinsic.h>], , XINCLUDES="nope")
		if test "$XINCLUDES" = nope; then dirs="/usr/unsupported/include /usr/local/include /usr/X386/include /usr/include/X11R4 /usr/X11R5/include /usr/include/X11R5 /usr/openwin/include /usr/X11/include /usr/sww/include"
			for i in $dirs ; do
				if test -r $i/X11/Intrinsic.h; then
					XINCLUDES=" -I$i"
				fi
			done
		fi
	else
		if test "$x_includes" != ""; then
			XINCLUDES=-I$x_includes
		else
			XINCLUDES="# no special path needed"
		fi
	fi
	if test "$XINCLUDES" = nope; then
		echo "Warning:  couldn't find any X11 include files."
		XINCLUDES="# no include files found"
	fi
	if test "$no_x" = yes; then
		XLIBSW=nope
		if test "$XLIBSW" = nope; then
			dirs="/usr/unsupported/lib /usr/local/lib /usr/X386/lib /usr/lib/X11R4 /usr/X11R5/lib /usr/lib/X11R5 /usr/openwin/lib /usr/X11/lib /usr/sww/X11/lib"
		for i in $dirs ; do
			if test -r $i/libX11.a; then
				XLIBSW="-L$i -lX11"
			fi
		done
	fi
	else
		if test "$x_libraries" = ""; then
			XLIBSW=-lX11
		else
			XLIBSW="-L$x_libraries -lX11"
		fi
	fi
	if test "$XLIBSW" = nope ; then
		AC_CHECK_LIB(Xwindow, XCreateWindow, XLIBSW=-lXwindow)
	fi
	if test "$XLIBSW" = nope ; then
		echo "Warning:  couldn't find the X11 library archive.  Using -lX11."
		XLIBSW=-lX11
	fi
	TKINCLUDE=$XINCLUDE
	TKLIB="${TKLIB} ${XLIBSW} ${TCLLIB}"
fi
AC_OUTPUT(Makefile)
